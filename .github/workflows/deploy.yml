name: Deploy

on:
  push:
    branches:
      - master

env:
  SERVICE_NAME: qtime
  IMAGE_NAME: qtime-container
  IMAGE_TAG: latest
  AWS_FLASK_CONTAINER_NAME: flask

jobs:
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      # Setup python environment
      - name: Install mypy dependency
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run mypy
        run: mypy app/ manage.py utils.py setup.py

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      # Setup python environment
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "temurin"
      - name: Setup firebase tools
        uses: w9jds/setup-firebase@main
        with:
          tools-version: 11.22.0
          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
      - name: Run unit tests in firebase emulator
        run: firebase emulators:exec --only firestore,auth --project qtime-bd47e 'python3 -m unittest discover -s ./test'
        env:
          SERVICE_KEY_PATH: "/opt/gcp_key.json"

  deploy:
    needs: [typecheck, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ca-central-1"
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION
          aws configure set region $AWS_DEFAULT_REGION
      - name: Install AWS lightsail CLI and jq
        # install LightsailCTL Plugin (https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software)
        run: |
          sudo apt-get update && sudo apt-get -y install curl jq
          curl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl -o /usr/local/bin/lightsailctl
          chmod +x /usr/local/bin/lightsailctl
      - name: Create firebase credentials
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: serviceAccountKey.json
          json: ${{ secrets.GCP_SA_KEY }}
      - name: Build docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      - name: Push docker image to AWS Lightsail
        run: |
          aws lightsail push-container-image \
            --service-name ${{ env.SERVICE_NAME }}  \
            --label ${{ env.SERVICE_NAME }}-latest  \
            --image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Deploy docker image to AWS Lightsail
        run: |
          # get most recently uploaded image
          IMAGE_TAG=$(aws lightsail get-container-images --service ${{ env.SERVICE_NAME }} | jq -r .containerImages[0].image)

          aws lightsail create-container-service-deployment \
            --service-name ${{ env.SERVICE_NAME }} \
            --containers "{
              \"${{ env.AWS_FLASK_CONTAINER_NAME }}\": {
                \"image\": \"$IMAGE_TAG\",
                \"ports\": {
                  \"5000\": \"HTTP\"
                }
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"${{ env.AWS_FLASK_CONTAINER_NAME }}\",
              \"containerPort\": 5000,
              \"healthCheck\": {
                \"path\": \"/api/health\",
                \"successCodes\": \"200\"
              }
            }"
      - name: Monitor if service is sucessfully deployed
        run: |
          # wait for service to be deployed (timeout after 15 minutes)
          TIMEOUT=90
          INTERVAL=10
          x=1
          STATUS=$(aws lightsail get-container-services --service-name ${{ env.SERVICE_NAME }} | jq -r .containerServices[0].state)
          while [ "$STATUS" != "RUNNING" ]
          do
            sleep $INTERVAL
            x=$(( $x + 1 ))
            if [ $x -gt 100 ]
            then
              echo "Timed out waiting for service to start running."
              exit 1
            fi
            STATUS=$(aws lightsail get-container-services --service-name ${{ env.SERVICE_NAME }} | jq -r .containerServices[0].state)
          done
      - name: Send notification on Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: "Github Deployer"
        with:
          args: "Successful deployment of ${{ env.SERVICE_NAME }}, service is running on [AWS Lightsail](https://lightsail.aws.amazon.com/ls/webapp/ca-central-1/container-services/qtime/deployments) at [https://queuetime.tech](https://queuetime.tech)."
